package org.jboss.xavier.analytics.rules.workload.inventory;

import org.jboss.xavier.analytics.pojo.input.workload.inventory.VMWorkloadInventoryModel
import org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel
import java.util.HashSet;

dialect "java"
agenda-group "Flags"
lock-on-active true
auto-focus false



rule "Flag_Rdm_Disk"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasRdmDisk != null,
            hasRdmDisk == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.RDM_DISK_FLAG_NAME)
        }
end


rule "Flag_Cpu_Memory_Hotplug_Memory_Add"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            eval(hasMemoryHotAdd != null &&
            hasMemoryHotAdd.equals(true))
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.CPU_MEMORY_HOTPLUG_FLAG_NAME)
        }
end


rule "Flag_Cpu_Memory_Hotplug_Cpu_Add"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            eval(hasCpuHotAdd != null &&
            hasCpuHotAdd.equals(true))
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.CPU_MEMORY_HOTPLUG_FLAG_NAME)
        }
end


rule "Flag_Cpu_Memory_Hotplug_Cpu_Remove"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            eval(hasCpuHotRemove != null &&
            hasCpuHotRemove.equals(true))
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.CPU_MEMORY_HOTPLUG_FLAG_NAME)
        }
end

rule "Flag_Cpu_Affinity"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            cpuAffinity != null
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.CPU_AFFINITY_FLAG_NAME)
        }
end


rule "Flag_USB_Device"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasUSBcontrollers != null,
            hasUSBcontrollers == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.USB_CONTROLLERS_FLAG_NAME)
        }
end


rule "Flag_UEFI_Boot"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            firmware != null,
            firmware.equalsIgnoreCase("EFI") || firmware.equalsIgnoreCase("BIOS")
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.UEFI_BOOT_FLAG_NAME)
        }
end


rule "Flag_VM_Host_Affinity_Configured"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasVmAffinityConfig != null,
            hasVmAffinityConfig == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
          addFlagIMS(WorkloadInventoryReportModel.VM_HOST_AFFINITY_CONFIGURED_FLAG_NAME)
        }
end

rule "Flag_VM_DRS_Config"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasVmDrsConfig != null,
            hasVmDrsConfig == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
           addFlagIMS(WorkloadInventoryReportModel.VM_DRS_CONFIG_FLAG_NAME)
        }
end
            
rule "Flag_Numa_Node_Affinity"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            numaNodeAffinity != null
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
           addFlagIMS(WorkloadInventoryReportModel.NUMA_NODE_AFFINITY_FLAG_NAME)
        }
end

rule "Flag_VM_HA_Config"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasVmHaConfig != null,
            hasVmHaConfig == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.VM_HA_CONFIG_FLAG_NAME)
        }
end

rule "Flag_Ballooned_Memory"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            balloonedMemory != null,
            balloonedMemory > 0
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.BALLOONED_MEMORY_FLAG_NAME)
        }
end

rule "Flag_Encrypted_Disk"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasEncryptedDisk != null,
            hasEncryptedDisk == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.ENCRYPTED_DISK_FLAG_NAME)
        }
end

rule "Flag_Opaque_Network"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasOpaqueNetwork != null,
            hasOpaqueNetwork == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.OPAQUE_NETWORK_FLAG_NAME)
        }
end

rule "Flag_PassthroughDevice"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasPassthroughDevice != null,
            hasPassthroughDevice == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport) {
            addFlagIMS(WorkloadInventoryReportModel.PASSTHROUGH_DEVICE_FLAG_NAME)
        }
end

rule "Flag_SR-IOV"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasSriovNic != null,
            hasSriovNic == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.SR_IOV_NIC_FLAG_NAME)
        }
end


rule "Flag_Shared_VMDK"
    when
        vmWorkloadInventoryModel : VMWorkloadInventoryModel(
            hasSharedVmdk != null,
            hasSharedVmdk == true
        )
        workloadInventoryReport : WorkloadInventoryReportModel()
    then
        modify(workloadInventoryReport)
        {
            addFlagIMS(WorkloadInventoryReportModel.SHARED_VMDK_FLAG_NAME)
        }
end



